{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "ineri",
    "patterns": [
        {
            "include": "#comment"
        },
		{
			"include": "#constant"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#string"
		},
		{
			"comment": "number",
			"name":"variable.parameter",
			"match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)([LlFfUuDdstST]|UL|ul)?\\b"
		},
		{
			"comment": "args",
			"name":"entity.name.section",
			"match": "\\b(selector|var|mode|json|text|color|callback|time|areas|chances|vars|scoreboard)\\b"
		},
		{
			"comment": "selector",
			"name":"variable.other",
			"begin": "(\\$|\\?)",
			"end": "(\\))"
		}
    ],
    "repository": {
        "comment":{
            "patterns": [
                {
                    "name":"comment.line",
                    "begin": "\\#",
                    "end":"\\n"
                }
            ]
        },
		"constant":{
			"patterns": [
				{
					"name":"storage.type.java",
					"begin": "int\\(",
					"end":"\\)|\\[",
					"patterns": [
						{
							"name":"constant.numeric.integer",
							"match": "\\\\."
						}
					]
				},
				{
					"name":"storage.type.java",
					"match": "(true|false)"
				}
			]
		},
		"keyword":{
			"patterns": [
				{
					"name":"keyword.control",
					"match": "\\b(if|else|for)\\b"
				},
				{
					"name":"keyword.declaration.function",
					"begin": "def ",
					"end":"{",
					"patterns": [
						{
							"name":"storage.type.function",
							"match": "\\\\."
						}
					]
				},
				{
					"name":"keyword.other",
					"match": "\\b(new|wait)\\b"
				},
				{
					"name":"keyword.operator.arithmetic",
					"match": "(\\+|-|\\*|/|%|\\^|=|\\+=|-=)"
				},
				{
					"name":"keyword.operator.logical",
					"match": "(==|<|>|>=|<=|!=|&|\\|)"
				},
				{
					"name":"keyword.operator.word",
					"match": " (and|or|not) "
				}
			]
		},
		"string":{
			"patterns": [
				{
					"name":"string.quoted.single",
					"begin": "'",
					"end":"'",
					"patterns": [
						{
							"name":"constant.character.escape",
							"match": "\\\\+[a-z]?(x|X|[0-9]|[a-f]|[A-F]){0,4}"
						}
					]
				},
				{
					"name":"string.quoted.double",
					"begin": "\"",
					"end":"\"",
					"patterns": [
						{
							"name":"constant.character.escape",
							"match": "\\\\+[a-z]?(x|X|[0-9]|[a-f]|[A-F]){0,4}"
						}
					]
				},
				{
					"name":"string.quoted.triple",
					"begin": "(\"\"\"|''')",
					"end":"(\"\"\"|''')",
					"patterns": [
						{
							"name":"constant.character.escape",
							"match": "\\\\+[a-z]?(x|X|[0-9]|[a-f]|[A-F]){0,4}"
						}
					]
				}
			]
		}
    },
	"scopeName": "source.ineri"
}